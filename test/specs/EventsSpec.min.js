describe("Event Tests",function(){var c,a,b;beforeEach(function(){a=false;b=document.createEvent("MouseEvents")});describe("JQuery version",function(){beforeEach(function(){c=$("#testSlider2").slider({value:1})});afterEach(function(){if(c){c.slider("destroy");c=null}});describe("Mouse Events",function(){it("'slideStart' event is triggered properly and can be binded to",function(){c.on("slideStart",function(){a=true});c.data("slider")._mousedown(b);expect(a).toBeTruthy()});it("'slide' event is triggered properly and can be binded to",function(){c.on("slide",function(){a=true});c.data("slider")._mousemove(b);expect(a).toBeTruthy()});it("'slide' event sets the right value on the input",function(){c.on("slide",function(){a=true;expect(isNaN(c.val())).not.toBeTruthy()});c.data("slider")._mousemove(b);expect(a).toBeTruthy()});it("'slide' event value and input value properties are synchronous",function(){c.on("slide",function(d){a=true;expect(d.value.toString()).toEqual(this.value)});c.slider("setValue",3,true,false);expect(a).toBeTruthy()});it("'change' event value and input value properties are synchronous",function(){c.on("change",function(d){a=true;expect(d.value.newValue.toString()).toEqual(c.val())});c.slider("setValue",3,false,true);expect(a).toBeTruthy()});it("'slideStop' event is triggered properly and can be binded to",function(){c.on("slideStop",function(){a=true});c.data("slider")._mouseup(b);expect(a).toBeTruthy()});it("slider should not have duplicate events after calling 'refresh'",function(){a=0;c.on("slideStop",function(){a+=1});c.slider("refresh");c.data("slider")._mouseup();expect(a).toEqual(1)});describe("Disabled Slider Event Tests",function(){beforeEach(function(){c.slider("disable")});it("should not trigger 'slideStart' event when disabled",function(){c.on("slideStart",function(){a=true});c.data("slider")._mousedown(b);expect(a).not.toBeTruthy()});it("should not trigger 'slide' event when disabled",function(){c.on("slide",function(){a=true});c.data("slider")._mousemove(b);expect(a).not.toBeTruthy()});it("should not trigger 'slideStop' event when disabled",function(){c.on("slideStop",function(){a=true});c.data("slider")._mouseup();expect(a).not.toBeTruthy()})})});describe("Touch Events",function(){var d;beforeEach(function(){d=document.createEvent("Event");var e=document.createEvent("MouseEvents");d.touches=[e];window.ontouchstart=true});afterEach(function(){window.ontouchstart=null});it("'slideStart' event is triggered properly and can be binded to",function(){d.initEvent("touchstart");c.on("slideStart",function(){a=true});c.data("slider")._mousedown(d);expect(a).toBeTruthy()});it("'slide' event is triggered properly and can be binded to",function(){d.initEvent("touchmove");c.on("slide",function(){a=true});c.data("slider")._mousemove(d);expect(a).toBeTruthy()});it("'slide' event sets the right value on the input",function(){d.initEvent("touchmove");c.on("slide",function(){a=true;expect(isNaN(c.val())).not.toBeTruthy()});c.data("slider")._mousemove(d);expect(a).toBeTruthy()});it("'slide' event value and input value properties are synchronous",function(){d.initEvent("touchmove");c.on("slide",function(f){a=true;expect(f.value.toString()).toEqual(c.val())});c.slider("setValue",3,true,false);expect(a).toBeTruthy()});it("'change' event value and input value properties are synchronous",function(){d.initEvent("touchmove");c.on("change",function(f){a=true;expect(f.value.newValue.toString()).toEqual(c.val())});c.slider("setValue",3,false,true);expect(a).toBeTruthy()});it("'slideStop' event is triggered properly and can be binded to",function(){d.initEvent("touchstop");c.on("slideStop",function(){a=true});c.data("slider")._mouseup();expect(a).toBeTruthy()});it("slider should not have duplicate events after calling 'refresh'",function(){d.initEvent("touchstop");a=0;c.on("slideStop",function(){a+=1});c.slider("refresh");c.data("slider")._mouseup();expect(a).toEqual(1)});it("slider should not bind multiple touchstart events after calling 'refresh'",function(){d.initEvent("touchstart",true,true);a=0;c.on("slideStart",function(){a+=1});c.slider("refresh");$(".slider .slider-handle").get(0).dispatchEvent(d);expect(a).toEqual(1)});describe("Disabled Slider Event Tests",function(){beforeEach(function(){c.slider("disable")});it("should not trigger 'slideStart' event when disabled",function(){d.initEvent("touchstart");c.on("slideStart",function(){a=true});c.data("slider")._mousedown(d);expect(a).not.toBeTruthy()});it("should not trigger 'slide' event when disabled",function(){d.initEvent("touchmove");c.on("slide",function(){a=true});c.data("slider")._mousemove(d);expect(a).not.toBeTruthy()});it("should not trigger 'slideStop' event when disabled",function(){d.initEvent("touchend");c.on("slideStop",function(){a=true});c.data("slider")._mouseup();expect(a).not.toBeTruthy()})})});describe("Enabled/Disabled tests",function(){it("'slideDisabled' event is triggered properly and can be binded to",function(){c.on("slideDisabled",function(){a=true});c.slider("disable");expect(a).toBeTruthy()});it("'slideDisabled' event is triggered properly and can be binded to",function(){c.on("slideEnabled",function(){a=true});c.slider("disable");c.slider("enable");expect(a).toBeTruthy()});it("'change' event is triggered properly and can be binded to",function(){c.on("change",function(){a=true});c.slider("setValue",3,false,true);expect(a).toBeTruthy()})})});describe("CommonJS version",function(){describe("Event repetition tests",function(){var e,d;beforeEach(function(){e=new Slider("#testSlider2");d=0});afterEach(function(){e.destroy()});it("'slide' event is triggered only once per slide action",function(){e.on("slide",function(){d++});e._mousemove(b);expect(d).toEqual(1)});it("'slideStart' event is triggered only once per slide action",function(){e.on("slideStart",function(){d++});e._mousedown(b);expect(d).toEqual(1)});it("'slideStop' event is triggered only once per slide action",function(){e.on("slideStop",function(){d++});e._mouseup(b);expect(d).toEqual(1)});it("'change' event is triggered only once per value change action",function(){e.on("change",function(){d++});e.setValue(3,false,true);expect(d).toEqual(1)})})})});