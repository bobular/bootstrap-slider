describe("Public Method Tests",function(){var a;describe("slider constructor",function(){it("reads and sets the 'id' attribute of the slider instance that is created",function(){var b="mySlider";a=$("#testSlider1").slider({id:b});var c=$("#testSlider1").siblings("div.slider").is("#"+b);expect(c).toBeTruthy()});it("generates multiple slider instances from selector",function(){$(".makeSlider").slider();var b=$(".makeSlider").siblings().is(".slider");expect(b).toBeTruthy();var c=$(".makeSlider").siblings(".slider").length;expect(c).toEqual(2)});it("reads and sets the 'min' option properly",function(){var b=-5;a=$("#testSlider1").slider({min:b});a.slider("setValue",b);var c=a.slider("getValue");expect(c).toBe(b)});it("reads and sets the 'max' option properly",function(){var c=15;a=$("#testSlider1").slider({max:c});a.slider("setValue",c);var b=a.slider("getValue");expect(b).toBe(c)});describe("reads and sets the 'step' option properly",function(){expect(true).toBeTruthy()});it("reads and sets the 'precision' option properly",function(){a=$("#testSlider1").slider({precision:2});a.slider("setValue",8.115);var b=a.slider("getValue");expect(b).toBe(8.12)});it("reads and sets the 'orientation' option properly",function(){var c="vertical";a=$("#testSlider1").slider({orientation:c});var b=$("#testSlider1").siblings("div.slider").hasClass("slider-vertical");expect(b).toBeTruthy()});it("reads and sets the 'value' option properly",function(){var c=8;a=$("#testSlider1").slider({value:c});a.slider("setValue",c);var b=a.slider("getValue");expect(b).toBe(c)});it("reads and sets the 'selection' option properly",function(){var c="after",d=10;a=$("#testSlider1").slider({selection:c});a.slider("setValue",d);var b=$("#testSlider1").siblings(".slider").children("div.slider-track").children("div.slider-selection").width();expect(b).toBe(0)});it("reads and sets the 'handle' option properly",function(){var b="triangle";a=$("#testSlider1").slider({handle:b});var c=$("#testSlider1").siblings(".slider").children("div.slider-track").children("div.slider-handle").hasClass("triangle");expect(c).toBeTruthy()});it("reads and sets the 'reversed' option properly",function(){var c=true,d=10;a=$("#testSlider1").slider({reversed:c});a.slider("setValue",d);var b=$("#testSlider1").siblings(".slider").children("div.slider-track").children("div.slider-selection").width();expect(b).toBe(0)});it("reads and sets the 'enabled' option properly",function(){a=$("#testSlider1").slider({enabled:false});var b=a.slider("isEnabled");expect(b).not.toBeTruthy()});describe("reads and sets the 'tooltip' option properly",function(){it("tooltip is not shown if set to 'hide'",function(){a=$("#testSlider1").slider({tooltip:"hide"});var b=a.siblings(".slider").children("div.tooltip").hasClass("hide");expect(b).toBeTruthy()});it("tooltip is shown during sliding if set to 'show'",function(){a=$("#testSlider1").slider({tooltip:"show"});var b=!($("#testSlider1").siblings(".slider").children("div.tooltip").hasClass("in"));expect(b).toBeTruthy();var d=document.createEvent("Events");d.initEvent("mouseenter",true,true);a.data("slider").sliderElem.dispatchEvent(d);var c=$("#testSlider1").siblings(".slider").children("div.tooltip").hasClass("in");expect(c).toBeTruthy()});it("tooltip is shown on mouse over and hides correctly after mouse leave",function(){a=$("#testSlider1").slider({tooltip:"show"});var c=!($("#testSlider1").siblings(".slider").children("div.tooltip").hasClass("in"));expect(c).toBeTruthy();var e=document.createEvent("Events");e.initEvent("mouseenter",true,true);a.data("slider").sliderElem.dispatchEvent(e);var d=$("#testSlider1").siblings(".slider").children("div.tooltip").hasClass("in");expect(d).toBeTruthy();var f=document.createEvent("Events");f.initEvent("mouseleave",true,true);a.data("slider").sliderElem.dispatchEvent(f);var b=!($("#testSlider1").siblings(".slider").children("div.tooltip").hasClass("in"));expect(b).toBeTruthy()});it("tooltip is always shown if set to 'always'",function(){a=$("#testSlider1").slider({tooltip:"always"});var b=$("#testSlider1").siblings(".slider").children("div.tooltip").hasClass("in");expect(b).toBeTruthy()});it("defaults to 'show' option if invalid value is passed",function(){a=$("#testSlider1").slider({tooltip:"invalid option value"});var b=!($("#testSlider1").siblings(".slider").children("div.tooltip").hasClass("in"));expect(b).toBeTruthy();var c=document.createEvent("Events");c.initEvent("mouseenter",true,true);a.data("slider").sliderElem.dispatchEvent(c);var d=$("#testSlider1").siblings(".slider").children("div.tooltip").hasClass("in");expect(d).toBeTruthy()})})});describe("'setValue()' tests",function(){var b=function(c){return"Invalid input value '"+c+"' passed in"};describe("if slider is a single value slider",function(){beforeEach(function(){a=$("#testSlider1").slider()});it("properly sets the value of the slider when given a numeric value",function(){var c=5;a.slider("setValue",c);var d=a.slider("getValue");expect(d).toBe(c)});it("if a value passed in is greater than the max (10), the slider only goes to the max",function(){var e=10,c=e+5;a.slider("setValue",c);var d=a.slider("getValue");expect(d).toBe(e)});it("if a value passed in is less than the min (0), the slider only goes to the min",function(){var d=0,c=d-5;a.slider("setValue",c);var e=a.slider("getValue");expect(e).toBe(d)});it("sets the 'value' property of the slider <input> element",function(){var d=9;a.slider("setValue",d);var c=document.querySelector("#testSlider1").value;c=parseFloat(c);expect(c).toBe(d)});it("sets the 'value' attribute of the slider <input> element",function(){var d=9;a.slider("setValue",d);var c=document.querySelector("#testSlider1").getAttribute("value");c=parseFloat(c);expect(c).toBe(d)});describe("when an invalid value type is passed in",function(){var c;beforeEach(function(){c="a"});it("throws an error and does not alter the slider value",function(){var d=a.slider("getValue");var f=function(){a.slider("setValue",c)};expect(f).toThrow(new Error(b(c)));var e=a.slider("getValue");expect(e).toBe(d)})})});describe("if slider is a range slider",function(){beforeEach(function(){a=$("#testSlider1").slider({value:[3,8]})});it("properly sets the values if both within the max and min",function(){var d=[5,7];a.slider("setValue",d);var c=a.slider("getValue");expect(c[0]).toBe(d[0]);expect(c[1]).toBe(d[1])});describe("caps values to the min if they are set to be less than the min",function(){var d=-5,c=7;it("first value is capped to min",function(){a.slider("setValue",[d,c]);var e=a.slider("getValue");expect(e[0]).toBe(0)});it("second value is capped to min",function(){a.slider("setValue",[c,d]);var e=a.slider("getValue");expect(e[1]).toBe(0)})});describe("caps values to the max if they are set to be higher than the max",function(){var d=15,c=7;it("first value is capped to max",function(){a.slider("setValue",[d,c]);var e=a.slider("getValue");expect(e[0]).toBe(10)});it("second value is capped to max",function(){a.slider("setValue",[c,d]);var e=a.slider("getValue");expect(e[1]).toBe(10)})});describe("if either value is of invalid type",function(){var d="a",c=7;it("first value is of invalid type",function(){var e=function(){a.slider("setValue",[d,c])};expect(e).toThrow(new Error(b(d)))});it("second value is of invalid type",function(){var e=function(){a.slider("setValue",[c,d])};expect(e).toThrow(new Error(b(d)))})})});describe("triggerSlideEvent argument",function(){it("if triggerSlideEvent argument is true, the 'slide' event is triggered",function(){var d=$("#testSlider1").slider({value:3});var c=5;d.on("slide",function(e){expect(c).toEqual(e.value)});d.slider("setValue",c,true)});it("if triggerSlideEvent argument is false, the 'slide' event is not triggered",function(){var c=5;var e=false;var d=$("#testSlider1").slider({value:3});d.on("slide",function(){e=true});d.slider("setValue",c,false);expect(e).toEqual(false)})});describe("triggerChangeEvent argument",function(){it("if triggerChangeEvent argument is true, the 'change' event is triggered",function(){var d=$("#testSlider1").slider({value:3});var c=5;d.on("change",function(e){expect(c).toEqual(e.value.newValue)});d.slider("setValue",c,true)});it("if triggerChangeEvent argument is false, the 'change' event is not triggered",function(){var d=false;var c=$("#testSlider1").slider({value:3});c.on("change",function(){d=true});c.slider("setValue",5,false);expect(d).toEqual(false)})})});describe("'getValue()' tests",function(){it("returns the current value of the slider",function(){a=$("#testSlider1").slider();var b=5;a.slider("setValue",b);var c=a.slider("getValue");expect(c).toBe(b)})});describe("'enable()' tests",function(){it("correctly enables a slider",function(){a=$("#testSlider1").slider({enabled:false});a.slider("enable");var b=a.slider("isEnabled");expect(b).toBeTruthy()})});describe("'disable()' tests",function(){it("correctly disable a slider",function(){a=$("#testSlider1").slider();a.slider("disable");var b=a.slider("isEnabled");expect(b).not.toBeTruthy()})});describe("'toggle()' tests",function(){it("correctly enables a disabled slider",function(){a=$("#testSlider1").slider({enabled:false});a.slider("toggle");var b=a.slider("isEnabled");expect(b).toBeTruthy()});it("correctly disables an enabled slider",function(){a=$("#testSlider1").slider();a.slider("toggle");var b=a.slider("isEnabled");expect(b).not.toBeTruthy()})});describe("'isEnabled()' tests",function(){it("returns true for an enabled slider",function(){a=$("#testSlider1").slider({id:"enabled",enabled:true});var b=a.slider("isEnabled");var d=a.siblings("#enabled");var c=d.hasClass("slider")&&d.hasClass("#enabled");expect(b).toBeTruthy();expect(c).not.toBeTruthy()});it("returns false for a disabled slider",function(){a=$("#testSlider1").slider({id:"disabled",enabled:false});var b=a.slider("isEnabled");var d=a.siblings("#disabled");var c=d.hasClass("slider")&&d.hasClass("slider-disabled");expect(b).not.toBeTruthy();expect(c).toBeTruthy()})});it("get attribute",function(){a=$("#testSlider1").slider();var b=a.slider("getAttribute","max");expect(b).toBe(10)});it("changes slider from basic to range",function(){a=$("#makeRangeSlider").slider();a.slider("setAttribute","range",true).slider("refresh");var b=$("#changeOrientationSlider").parent("div.slider").find(".slider-handle").last().hasClass("hide");expect(b).toBeFalsy()});it("setAttribute: changes the 'data-slider-orientation' property from horizontal to vertical",function(){a=$("#changeOrientationSlider").slider({id:"changeOrientationSliderElem"});a.slider("setAttribute","orientation","vertical").slider("refresh");var c=$("#changeOrientationSliderElem");var b=c.hasClass("slider-vertical");expect(b).toBeTruthy()});it("relayout: if slider is not displayed on initialization and then displayed later on, relayout() will re-adjust the margin-left of the tooltip",function(){a=new Slider("#relayoutSliderInput",{id:"relayoutSlider",min:0,max:10,value:5});var d=document.querySelector("#relayoutSlider .tooltip-main");var b=document.querySelector("#relayoutSliderContainer");var c;c=parseFloat(d.style.marginLeft);expect(c).toBe(0);b.style.display="block";a.relayout();c=Math.abs(parseFloat(d.style.marginLeft));expect(c).toBeGreaterThan(0)});it("relayout: if slider is not displayed on initialization and then displayed later on, relayout() will re-adjust the tick label width",function(){a=new Slider("#relayoutSliderInputTickLabels",{id:"relayoutSliderTickLabels",min:0,max:10,ticks:[0,5,10],ticks_labels:["low","mid","high"],value:5});var c=$("#relayoutSliderTickLabels").find(".slider-tick-label");var d,b;for(d=0;d<c.length;d++){b=$(c[d]);expect(parseInt(b.css("width"))).toBe(0)}$("#relayoutSliderContainerTickLabels").css("display","block");a.relayout();$("#relayoutSliderContainerTickLabels").css("display","none");for(d=0;d<c.length;d++){b=$(c[d]);expect(parseInt(b.css("width"))).toBeGreaterThan(0)}});afterEach(function(){if(a){if(a instanceof jQuery){a.slider("destroy")}if(a instanceof Slider){a.destroy()}a=null}})});